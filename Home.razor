@page "/matrix-calculator"

<h3>Matrix Calculator</h3>

<div>
    <h4>Matrix A</h4>
    <label>Rows: </label>
    <input type="number" min="1" @bind="RowsA" />
    <label>Columns: </label>
    <input type="number" min="1" @bind="ColsA" />
    <div>@RenderMatrix(MatrixA)</div>
</div>

<div>
    <h4>Matrix B</h4>
    <label>Rows: </label>
    <input type="number" min="1" @bind="RowsB" />
    <label>Columns: </label>
    <input type="number" min="1" @bind="ColsB" />
    <div>@RenderMatrix(MatrixB)</div>
</div>

<div>
    <button @onclick="AddMatrices">Add Matrices</button>
    <button @onclick="SubtractMatrices">Subtract Matrices</button>
    <button @onclick="MultiplyMatrices">Multiply Matrices</button>
</div>

<h4>Result</h4>
<div>
    @if (ResultMatrix != null)
    {
        @RenderMatrix(ResultMatrix)
    }
</div>

@code {
    private int rowsA = 3;
    private int colsA = 3;
    private int rowsB = 3;
    private int colsB = 3;

    private double[,] MatrixA { get; set; } = new double[3, 3];
    private double[,] MatrixB { get; set; } = new double[3, 3];
    private double[,]? ResultMatrix { get; set; }

    private int RowsA
    {
        get => rowsA;
        set
        {
            if (rowsA != value)
            {
                rowsA = value;
                UpdateMatrixDimensions();
            }
        }
    }

    private int ColsA
    {
        get => colsA;
        set
        {
            if (colsA != value)
            {
                colsA = value;
                UpdateMatrixDimensions();
            }
        }
    }

    private int RowsB
    {
        get => rowsB;
        set
        {
            if (rowsB != value)
            {
                rowsB = value;
                UpdateMatrixDimensions();
            }
        }
    }

    private int ColsB
    {
        get => colsB;
        set
        {
            if (colsB != value)
            {
                colsB = value;
                UpdateMatrixDimensions();
            }
        }
    }

    private void UpdateMatrixDimensions()
    {
        MatrixA = new double[RowsA, ColsA];
        MatrixB = new double[RowsB, ColsB];
        ResultMatrix = null;
        StateHasChanged();
    }

    private RenderFragment RenderMatrix(double[,] matrix) => builder =>
    {
        for (int i = 0; i < matrix.GetLength(0); i++)
        {
            builder.OpenElement(0, "div");
            for (int j = 0; j < matrix.GetLength(1); j++)
            {
                builder.OpenElement(1, "input");
                builder.AddAttribute(2, "type", "number");
                builder.AddAttribute(3, "value", matrix[i, j].ToString());
                builder.AddAttribute(4, "oninput", EventCallback.Factory.Create<ChangeEventArgs>(this, e =>
                {
                    if (double.TryParse(e.Value?.ToString(), out var value))
                    {
                        matrix[i, j] = value;
                    }
                }));
                builder.CloseElement();
            }
            builder.CloseElement();
        }
    };

    private void AddMatrices()
    {
        if (!ValidateDimensionsForOperation()) return;

        ResultMatrix = new double[RowsA, ColsA];
        for (int i = 0; i < RowsA; i++)
        {
            for (int j = 0; j < ColsA; j++)
            {
                ResultMatrix[i, j] = MatrixA[i, j] + MatrixB[i, j];
            }
        }
    }

    private void SubtractMatrices()
    {
        if (!ValidateDimensionsForOperation()) return;

        ResultMatrix = new double[RowsA, ColsA];
        for (int i = 0; i < RowsA; i++)
        {
            for (int j = 0; j < ColsA; j++)
            {
                ResultMatrix[i, j] = MatrixA[i, j] - MatrixB[i, j];
            }
        }
    }

    private void MultiplyMatrices()
    {
        if (ColsA != RowsB)
        {
            // For matrix multiplication, the number of columns in A must equal the number of rows in B
            ResultMatrix = null;
            return;
        }

        ResultMatrix = new double[RowsA, ColsB];
        for (int i = 0; i < RowsA; i++)
        {
            for (int j = 0; j < ColsB; j++)
            {
                ResultMatrix[i, j] = 0;
                for (int k = 0; k < ColsA; k++)
                {
                    ResultMatrix[i, j] += MatrixA[i, k] * MatrixB[k, j];
                }
            }
        }
    }

    private bool ValidateDimensionsForOperation()
    {
        if (RowsA != RowsB || ColsA != ColsB)
        {
            // For addition and subtraction, the matrices must have the same dimensions
            ResultMatrix = null;
            return false;
        }
        return true;
    }
}
